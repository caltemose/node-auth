// Generated by CoffeeScript 1.6.3
(function() {
  var ErrorFlag, Field, Form, SubmitButton, Validator,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (this.auth == null) {
    this.auth = {};
  }

  Validator = (function() {
    function Validator() {
      if (!!this.singleton_instance) {
        return this.singleton_instance;
      }
      this.singleton_instance = this;
    }

    Validator.prototype.test = function(method, input) {
      if (this[method]) {
        return this[method](input);
      } else {
        return this.not_empty(input);
      }
    };

    Validator.prototype.null_selection = "-1";

    Validator.prototype.not_empty = function(input) {
      return input.val().length > 0;
    };

    Validator.prototype.email = function(input) {
      var val;
      val = input.val();
      return val.match(this.patterns.email) && val.length <= 54;
    };

    Validator.prototype.checked = function(input) {
      return input.prop('checked');
    };

    Validator.prototype.zip = /^([0-9]{5,5})$/i;

    Validator.prototype.phone = /^\D?(\d{3})\D?\D?(\d{3})\D?(\d{4})$/i;

    Validator.prototype.email = /^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$/i;

    return Validator;

  })();

  this.auth.validator = new Validator();

  Form = (function() {
    function Form(house) {
      var bound_fields, self;
      this.house = house;
      this.reset = __bind(this.reset, this);
      this.process_submission = __bind(this.process_submission, this);
      self = this;
      this.fields = [];
      $('input, select', this.house).focus(function() {
        return $('body').trigger("fieldchange");
      });
      bound_fields = this.fields;
      $('input', this.house).each(function() {
        if ($(this).attr('type') !== 'submit') {
          return bound_fields.push(new Field($(this), self));
        }
      });
      this.house.submit(this.process_submission);
      this.house.on('reset_form', this.reset);
    }

    Form.prototype.process_submission = function() {
      return true;
    };

    Form.prototype.reset = function() {
      var field, _i, _len, _ref, _results;
      _ref = this.fields;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        _results.push(field.reset());
      }
      return _results;
    };

    return Form;

  })();

  Field = (function() {
    function Field(house) {
      var _ref, _ref1;
      this.house = house;
      this.check_value = __bind(this.check_value, this);
      this.blur = __bind(this.blur, this);
      this.focus = __bind(this.focus, this);
      this.input = this.house;
      console.log('Field.constructor() ', this.input);
      this.field_update_event = "keyup";
      if (((_ref = this.input[0]) != null ? _ref.type : void 0) === "checkbox" || ((_ref1 = this.input[0]) != null ? _ref1.type : void 0) === "radio") {
        this.field_update_event = "change";
      }
      this.input.bind(this.field_update_event, this.check_value).focus(this.focus).blur(this.blur);
      this.extract_configuration();
      this.house.data("field", this);
    }

    Field.prototype.focus = function() {
      console.log('Field.focus()');
      return this.house.addClass("focus");
    };

    Field.prototype.blur = function(event) {
      var _ref;
      console.log('Field.blur()');
      if ((_ref = auth.selections.body) != null) {
        _ref.trigger("field_edited");
      }
      return this.house.removeClass("focus");
    };

    Field.prototype.extract_configuration = function() {
      var d;
      d = this.house.data();
      this.validation_method = d.validation || false;
      this.error_message = d.validationErrors || false;
      this.requires_validation = this.validation_method || this.house.is('.required');
      return this.error_flag = new ErrorFlag(this);
    };

    Field.prototype.check_value = function(event) {
      var event_type, _ref;
      console.log('Field.check_value()');
      event_type = event != null ? event.type : void 0;
      if (this.requires_validation) {
        if (this.is_valid()) {
          this.accept_value();
        } else {
          this.reject_value(!event || event_type === "blur");
        }
      }
      return (_ref = auth.selections.body) != null ? _ref.trigger("field_edited") : void 0;
    };

    Field.prototype.is_valid = function() {
      return this.valid = auth.validator.test(this.validation_method, this.input);
    };

    Field.prototype.accept_value = function() {
      if (this.required == null) {
        this.required = this.house.is(".required");
      }
      this.house.removeClass('field-with-errors');
      if (this.required || this.valid && this.input.val().length) {
        this.house.addClass('completed');
      } else {
        this.house.removeClass('completed');
      }
      this.error_flag.conceal();
      return this.house.trigger("value_accepted");
    };

    Field.prototype.reject_value = function(apply_error_state) {
      this.house.addClass(apply_error_state ? 'field-with-errors' : null).removeClass('completed');
      if (apply_error_state) {
        this.error_flag.reveal();
      }
      return this.house.trigger("value_rejected");
    };

    Field.prototype.report_errors = function() {
      if (this.valid || !this.requires_validation) {
        return null;
      } else {
        return this.error_message || "invalid field";
      }
    };

    Field.prototype.reset = function() {
      this.input.not('input:radio, input:checkbox').val('').blur();
      if (this.mask) {
        this.mask.reset();
      }
      this.house.removeClass('completed field-with-errors');
      return this.error_flag.conceal();
    };

    return Field;

  })();

  ErrorFlag = (function() {
    function ErrorFlag(field) {
      this.field = field;
      this.conceal = __bind(this.conceal, this);
      this.reveal = __bind(this.reveal, this);
    }

    ErrorFlag.prototype.reveal = function() {
      this.build_flag();
      return this.flag.addClass("visible");
    };

    ErrorFlag.prototype.conceal = function() {
      this.build_flag();
      return this.flag.removeClass("visible");
    };

    ErrorFlag.prototype.build_flag = function() {
      if (this.flag === void 0) {
        this.flag = $("<dl><dt>Errors</dt></dl>", {
          css: "display: none;"
        }).append($("<dd />", {
          html: this.field.error_message
        }));
        if (this.field.house.data().validate === 'radio') {
          this.flag.insertAfter(this.field.house.find('p'));
        } else {
          this.flag.insertAfter(this.field.house);
        }
      }
      return this.flag;
    };

    return ErrorFlag;

  })();

  SubmitButton = (function() {
    function SubmitButton() {}

    return SubmitButton;

  })();

  if (auth.selections && auth.selections.forms) {
    auth.selections.forms.each(function() {
      var form;
      return form = new Form($(this));
    });
  }

}).call(this);
